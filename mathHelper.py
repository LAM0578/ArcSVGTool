from numpy import (
    arctan2 as np_arctan2,
    sqrt as np_sqrt,
    sin as np_sin,
    cos as np_cos,
    pi as np_pi
)
from scipy.integrate import quad

# Generated by Codeium

def cubic_bezier_length(p0, p1, p2, p3):
    def integrand(t):
        dxdt = 3*(1-t)**2 * (p1[0] - p0[0]) + 6*(1-t)*t * (p2[0] - p1[0]) + 3*t**2 * (p3[0] - p2[0])
        dydt = 3*(1-t)**2 * (p1[1] - p0[1]) + 6*(1-t)*t * (p2[1] - p1[1]) + 3*t**2 * (p3[1] - p2[1])
        return np_sqrt(dxdt**2 + dydt**2)

    L, _ = quad(integrand, 0, 1)
    return L

def quad_bezier_length(p0, p1, p2):
    def integrand(t):
        dxdt = 2*(1-t) * (p1[0] - p0[0]) + 2*t * (p2[0] - p1[0])
        dydt = 2*(1-t) * (p1[1] - p0[1]) + 2*t * (p2[1] - p1[1])
        return np_sqrt(dxdt**2 + dydt**2)

    L, _ = quad(integrand, 0, 1)
    return L

def elliptical_arc_length(p0, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, p1):
    # 计算椭圆中心
    cx = (p0[0] + p1[0]) / 2
    cy = (p0[1] + p1[1]) / 2

    # 计算椭圆半轴
    a = rx
    b = ry

    # 计算椭圆旋转角度
    theta = xAxisRotation

    # 计算椭圆参数
    h = (p1[0] - p0[0]) / 2
    k = (p1[1] - p0[1]) / 2

    # 计算椭圆弧的起始角度和终止角度
    start_angle = np_arctan2(k, h)
    if largeArcFlag == 1:
        end_angle = start_angle + np_pi
    else:
        end_angle = start_angle

    end_angle += np_pi

    # 计算椭圆弧的长度
    def integrand(angle):
        x = cx + a * np_cos(angle) * np_cos(theta) - b * np_sin(angle) * np_sin(theta)
        y = cy + a * np_cos(angle) * np_sin(theta) + b * np_sin(angle) * np_cos(theta)
        return np_sqrt((x - p0[0])**2 + (y - p0[1])**2)

    L, _ = quad(integrand, start_angle, end_angle)
    return L